package unitTest.analyzers;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import unitTest.model.TestReport;

/**
 * Eclipse IDE Metadata Analyzer.
 *
 * This tool searches for project and classpath metadata generated by Eclipse IDE
 * and derived IDE's and extracts the project basic information and dependencies.
 * The tool detects Java, Web, EJB, EAR, Google Web Toolkit, Google App Engine,
 * Groovy, Grails, Eclipse PDE and Eclipse JET projects.
 *
 * @author jorge.hidalgo
 * @version 1.0
 */
public class TestReportAnalyzer {

    /**
     * The project root directory.
     */
    private final File rootDir;

    /**
     * Bean with analysis results.
     */
    private TestReport testReport;

    /**
     * XPath expression used to unit Test report.
     */
    private static final String XPATH_TEST_CASES_PASSED = "/report/testCasesPassed/text()"; 
    
    private static final String XPATH_TEST_CASES_FAILED = "/report/testCasesFailed/text()"; 
	
	private static final String XPATH_ASSERTIONS_PASSED = "/report/assertionsPassed/text()"; 
	
	private static final String XPATH_ASSERTIONS_FAILED = "/report/assertionsFailed/text()"; 
    
	private static final String XPATH_TOTAL_TESTS = "/report/unittestsTotal/text()"; 
	
	private static final String XPATH_TOTAL_ERRORS = "/report/totalError/text()";
	
	private static final String XPATH_LAST_SUCCESSFUL_BUILD_UNIT_TEST = "/reportPath/unitTestsTrunk/lastSuccessfulBuild/text()";
	
	private static final String XPATH_LAST_BUILD_UNIT_TEST = "/reportPath/unitTestsTrunk/lastBuild/text()";
	
    
    /**
     * Path to files.
     */
    private static final String UNIT_TEST_FILE = "sonar/report/unittest-report.xml";
    
    private static final String REPORT_PATH_FILE = "sonar/report/reportPath.xml";

    /**
     * The logger.
     * 
     */
    private final Logger log = LoggerFactory.getLogger(this.getClass());

    /**
     * Analyzer constructor.
     *
     * @param rootDir the project root directory
     */
    public TestReportAnalyzer(final File rootDir) {
        super();
        this.rootDir = rootDir;
    }

    /**
     * Analyzes the metadata files.
     *
     * @return the project information extracted from metadata files
     * @throws AnalyzerException any error occurred while analyzing the metadata
     *                           files, typically a parsing error in XML files
     */
    public TestReport analyze()
        throws AnalyzerException  {

        testReport = new TestReport();

        analyzeReport();

        return testReport;
    }

    /**
     * Analyzes the .project file.
     *
     * @throws AnalyzerException any error occurred while analyzing the metadata
     *                           files, typically a parsing error in XML files
     */
    private void analyzeReport()
        throws AnalyzerException {
                
        try {
            // parses .project file
            File projectFile = new File(rootDir, UNIT_TEST_FILE);
            if (!projectFile.exists()) {
            	log.error("Unit test report file does not exist");
                return;
            }
            
            File pathFile = new File(rootDir, REPORT_PATH_FILE);
            if(!pathFile.exists()){
            	log.error("Path file does not exist");
            	return;
            }

            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setNamespaceAware(true);
            DocumentBuilder builder = factory.newDocumentBuilder();
            XPathFactory xpathFactory = XPathFactory.newInstance();
            XPath xpath = xpathFactory.newXPath();

            Document testReportXML = builder.parse(projectFile);
            
            Document pathReportXML = builder.parse(pathFile);
            
            // gets passed Test Cases
            XPathExpression xpathTestCasesPassed = xpath.compile(XPATH_TEST_CASES_PASSED);
            NodeList passedTestCasesNodes = (NodeList) xpathTestCasesPassed.evaluate(testReportXML, XPathConstants.NODESET);
            String testCasesPassed = passedTestCasesNodes.item(0).getNodeValue();
            
            XPathExpression xpathTestCasesFailed = xpath.compile(XPATH_TEST_CASES_FAILED);
            NodeList failedTestCasesNodes = (NodeList) xpathTestCasesFailed.evaluate(testReportXML, XPathConstants.NODESET);
            String testCasesFailed = failedTestCasesNodes.item(0).getNodeValue();

            XPathExpression xpathTestAssertionsPassed = xpath.compile(XPATH_ASSERTIONS_PASSED);
            NodeList passedAssertionsNodes = (NodeList) xpathTestAssertionsPassed.evaluate(testReportXML, XPathConstants.NODESET);
            String assertionsPassed = passedAssertionsNodes.item(0).getNodeValue();
            
            XPathExpression xpathTestAssertionsFailed = xpath.compile(XPATH_ASSERTIONS_FAILED);
            NodeList failedAssertionsNodes = (NodeList) xpathTestAssertionsFailed.evaluate(testReportXML, XPathConstants.NODESET);
            String assertionsFailed = failedAssertionsNodes.item(0).getNodeValue();

                   
            XPathExpression xpathTestTotal = xpath.compile(XPATH_TOTAL_TESTS);
            NodeList totalTestsNodes = (NodeList) xpathTestTotal.evaluate(testReportXML, XPathConstants.NODESET);
            String totalTest = totalTestsNodes.item(0).getNodeValue();

            XPathExpression xpathTotalErrors = xpath.compile(XPATH_TOTAL_ERRORS);
            NodeList totalErrorsNodes = (NodeList) xpathTotalErrors.evaluate(testReportXML, XPathConstants.NODESET);
            String totalError = totalErrorsNodes.item(0).getNodeValue();
            
            
            XPathExpression xpathLastBuild = xpath.compile(XPATH_LAST_BUILD_UNIT_TEST);
            NodeList lastBuildNodes = (NodeList) xpathLastBuild.evaluate(pathReportXML, XPathConstants.NODESET);
            String lastBuild = lastBuildNodes.item(0).getNodeValue();
            
            XPathExpression xpathLastSuccessfulBuild = xpath.compile(XPATH_LAST_SUCCESSFUL_BUILD_UNIT_TEST);
            NodeList lastSuccessfulBuildNodes = (NodeList) xpathLastSuccessfulBuild.evaluate(pathReportXML, XPathConstants.NODESET);
            String lastSuccessfulBuild = lastSuccessfulBuildNodes.item(0).getNodeValue();

            
            testReport.setAssertionsPassed(assertionsPassed);
            testReport.setAssertionsFailed(assertionsFailed);
            testReport.setTestCasesFailed(testCasesFailed);
            testReport.setTestCasesPassed(testCasesPassed);
            testReport.setTotalError(totalError);
            testReport.setTotalTest(totalTest);
            testReport.setLastBuild(lastBuild);
            testReport.setLastSuccessfulBuild(lastSuccessfulBuild);
            
            log.info("Successfully analysed the path and the unit test report");
           

        } catch (ParserConfigurationException |
                 SAXException |
                 XPathExpressionException |
                 IOException ex) {
            log.error("error parsing project file", ex);
            throw new AnalyzerException("error parsing project file", ex);
        }
    }

}
